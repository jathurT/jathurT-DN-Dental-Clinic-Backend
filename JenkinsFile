pipeline {
    agent any

    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['staging', 'production'], description: 'Select deployment environment')
        string(name: 'SERVER_PORT', defaultValue: '8081', description: 'Port for the application to run on EC2')
        string(name: 'MYSQL_PORT', defaultValue: '3306', description: 'Port for MySQL to run on EC2')
        // New parameter for Let's Encrypt environment selection
        choice(name: 'LETSENCRYPT_ENV', choices: ['staging', 'production'],
               description: 'Select Let\'s Encrypt environment (use staging to avoid rate limits during testing)')
    }

    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        MAIL_CREDENTIALS = credentials('mail-credentials')
        JWT_SECRET = credentials('jwt-secret')
        DB_CREDENTIALS = credentials('db-credentials')
        MYSQL_ROOT_PASSWORD = credentials('mysql-root-password')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = "jathurt/myapp-backend"
        EC2_HOST = credentials('ec2-host')
        EC2_USER = 'ubuntu'
        DEPLOY_ENV = "${params.DEPLOY_ENV ?: 'staging'}"
        SERVER_PORT = "${params.SERVER_PORT}"
        MYSQL_PORT = "${params.MYSQL_PORT}"
        DOMAIN_NAME = "dndentalclinic.com.lk"
        ADMIN_EMAIL = "ktmjathur2001@gmail.com"
        // New environment variable for Let's Encrypt environment
        LETSENCRYPT_ENV = "${params.LETSENCRYPT_ENV ?: 'staging'}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x mvnw'
                sh './mvnw clean package -DskipTests --no-transfer-progress'
            }
        }

        stage('Prepare .env File') {
            steps {
                script {
                    sh '''
                        # Create .env file with secure permissions
                        touch .env && chmod 600 .env

                        cat > .env << EOL
SPRING_APPLICATION_NAME=backend
SERVER_PORT=${SERVER_PORT}
MYSQL_PORT=${MYSQL_PORT}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dental
SPRING_DATASOURCE_USERNAME=${DB_CREDENTIALS_USR}
SPRING_DATASOURCE_PASSWORD=${DB_CREDENTIALS_PSW}
SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
SPRING_JPA_SHOW_SQL=false
APP_CORS_ALLOWED_ORIGINS=https://${DOMAIN_NAME},http://localhost:3000
APP_RESET_PASSWORD_LINK=https://${DOMAIN_NAME}/reset-password
SPRING_APP_JWTSECRET=${JWT_SECRET}
SPRING_APP_JWTEXPIRATIONMS=86400000
SPRING_APP_JWTCOOKIENAME=dn-dental-clinic
SPRING_MAIL_HOST=smtp.gmail.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=${MAIL_CREDENTIALS_USR}
SPRING_MAIL_PASSWORD=${MAIL_CREDENTIALS_PSW}
SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT=5000
AWS_ACCESSKEYID=${AWS_CREDENTIALS_USR}
AWS_SECRETKEY=${AWS_CREDENTIALS_PSW}
AWS_REGION=eu-north-1
AWS_S3_BUCKET=patient-logbook-photos
EOL

                        # Verify file was created successfully
                        if [ ! -f .env ]; then
                            echo "Failed to create .env file"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Check Monitoring Directories') {
            steps {
                script {
                    sh '''
                        # Verify that the required directories exist
                        if [ ! -d "prometheus" ]; then
                            echo "Error: prometheus directory not found in project"
                            exit 1
                        fi

                        if [ ! -d "grafana/provisioning/dashboards" ]; then
                            echo "Error: grafana/provisioning/dashboards directory not found in project"
                            exit 1
                        fi

                        if [ ! -d "grafana/provisioning/datasources" ]; then
                            echo "Error: grafana/provisioning/datasources directory not found in project"
                            exit 1
                        fi

                        # Verify the directories contents
                        ls -la prometheus/
                        ls -la grafana/provisioning/dashboards/
                        ls -la grafana/provisioning/datasources/
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                    sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'
                sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }

        stage('Deploy to EC2') {
            steps {
                withEnv([
                    "REMOTE_USER=${EC2_USER}",
                    "REMOTE_HOST=${EC2_HOST}",
                    "DOCKER_USERNAME=${DOCKER_CREDENTIALS_USR}",
                    "DOCKER_PASSWORD=${DOCKER_CREDENTIALS_PSW}",
                    "DOMAIN_NAME=${DOMAIN_NAME}",
                    "ADMIN_EMAIL=${ADMIN_EMAIL}",
                    "SERVER_PORT=${SERVER_PORT}",
                    "LETSENCRYPT_ENV=${LETSENCRYPT_ENV}"
                ]) {
                    sshagent(['ec2-ssh-key']) {
                        sh '''
                            set -e  # Exit on any error

                            echo "Preparing deployment on ${REMOTE_USER}@${REMOTE_HOST}..."

                            # First check and clean existing deployment directory if needed
                            echo "Checking and cleaning existing directories if needed..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "sudo rm -rf ~/app-deployment || true"

                            # Create remote directory structure with proper permissions
                            echo "Creating remote directories with proper permissions..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/prometheus"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/grafana/provisioning/dashboards"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/grafana/provisioning/datasources"

                            # Ensure the ubuntu user owns all these directories
                            echo "Setting ownership of remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "sudo chown -R $REMOTE_USER:$REMOTE_USER ~/app-deployment"

                            # Ensure proper permissions on remote directories
                            echo "Setting permissions on remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "chmod -R 755 ~/app-deployment"

                            # List directories to verify
                            echo "Verifying remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/"

                            # Copy main config files
                            echo "Copying docker-compose.yml and .env..."
                            scp -o StrictHostKeyChecking=no docker-compose.yml .env $REMOTE_USER@$REMOTE_HOST:~/app-deployment/

                            # Copy the existing prometheus and grafana configuration files
                            echo "Copying prometheus configuration..."
                            scp -o StrictHostKeyChecking=no prometheus/prometheus.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/prometheus/

                            echo "Copying grafana dashboard configurations..."
                            scp -o StrictHostKeyChecking=no grafana/provisioning/dashboards/dashboard.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/dashboards/
                            scp -o StrictHostKeyChecking=no grafana/provisioning/dashboards/booking_dashboard.json $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/dashboards/

                            echo "Copying grafana datasource configurations..."
                            scp -o StrictHostKeyChecking=no grafana/provisioning/datasources/datasource.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/datasources/

                            # Verify files on remote server
                            echo "Verifying remote files..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/prometheus/"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/grafana/provisioning/dashboards/"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/grafana/provisioning/datasources/"

                            # Setup SSL Certificate with Let's Encrypt
                            echo "Setting up SSL for domain $DOMAIN_NAME using Let's Encrypt $LETSENCRYPT_ENV environment..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "DOMAIN_NAME='${DOMAIN_NAME}' SERVER_PORT='${SERVER_PORT}' ADMIN_EMAIL='${ADMIN_EMAIL}' LETSENCRYPT_ENV='${LETSENCRYPT_ENV}' bash -s" << 'EOF'
# Store environment variables in local variables
DOMAIN="${DOMAIN_NAME}"
ADMIN_EMAIL="${ADMIN_EMAIL}"
SERVER_PORT="${SERVER_PORT}"
LETSENCRYPT_ENV="${LETSENCRYPT_ENV}"

echo "Using domain: $DOMAIN"
echo "Using admin email: $ADMIN_EMAIL"
echo "Using server port: $SERVER_PORT"
echo "Using Let's Encrypt environment: $LETSENCRYPT_ENV"

# Install Certbot if not already installed
sudo apt-get update
sudo apt-get install -y certbot python3-certbot-nginx

# Ensure Nginx is installed
if ! command -v nginx &> /dev/null; then
    sudo apt-get install -y nginx
fi

# Create Nginx configuration for the domain
echo "Creating Nginx configuration for $DOMAIN..."
sudo tee /etc/nginx/sites-available/$DOMAIN.conf > /dev/null << 'EON'
server {
    listen 80;
    server_name DOMAIN_PLACEHOLDER;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
EON

# Replace the placeholder with the actual domain
sudo sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" /etc/nginx/sites-available/$DOMAIN.conf

# Create certbot directory
sudo mkdir -p /var/www/certbot

# Enable the site
sudo ln -sf /etc/nginx/sites-available/$DOMAIN.conf /etc/nginx/sites-enabled/

# Test Nginx configuration
sudo nginx -t

# Reload Nginx to apply the basic configuration
sudo systemctl reload nginx

# Configure certbot command based on the environment
if [ "$LETSENCRYPT_ENV" = "staging" ]; then
    echo "Using Let's Encrypt STAGING environment to avoid rate limits"
    CERTBOT_CMD="sudo certbot --nginx -d \"$DOMAIN\" --non-interactive --agree-tos --email \"$ADMIN_EMAIL\" --redirect --staging"
else
    echo "Using Let's Encrypt PRODUCTION environment"
    CERTBOT_CMD="sudo certbot --nginx -d \"$DOMAIN\" --non-interactive --agree-tos --email \"$ADMIN_EMAIL\" --redirect"
fi

# Run Certbot to obtain SSL certificate (with || true to prevent pipeline failure if it doesn't work yet)
echo "Obtaining SSL certificate for $DOMAIN..."
eval "$CERTBOT_CMD" || true

# Verify certificate
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "SSL certificate successfully installed for $DOMAIN"

    # Check if we're using a staging certificate and warn accordingly
    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        echo "WARNING: You are using a Let's Encrypt STAGING certificate."
        echo "These certificates are NOT trusted by browsers and will show security warnings."
        echo "This is intentional to avoid hitting rate limits during testing."
        echo "When ready for production, switch to LETSENCRYPT_ENV=production."
    fi

    # Update the nginx config with our additional locations
    sudo tee /etc/nginx/sites-available/$DOMAIN.conf > /dev/null << 'EON'
server {
    listen 80;
    server_name DOMAIN_PLACEHOLDER;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name DOMAIN_PLACEHOLDER;

    # SSL configuration from LetsEncrypt
    ssl_certificate /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/privkey.pem;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Backend API - fixed proxy_pass
    location /api/ {
        proxy_pass http://localhost:PORT_PLACEHOLDER/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Grafana
    location /grafana/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Admin frontend - IMPORTANT: This should come before the root location
    location /admin {
        alias /var/www/html/admin;
        try_files $uri $uri/ /admin/index.html;
        index index.html;
    }

    # User frontend (root path)
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
        index index.html;
    }
EON

    # Replace placeholders
    sudo sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" /etc/nginx/sites-available/$DOMAIN.conf
    sudo sed -i "s/PORT_PLACEHOLDER/$SERVER_PORT/g" /etc/nginx/sites-available/$DOMAIN.conf

    # If using staging environment, add a visible warning banner to the NGINX configuration
    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        # Insert a warning banner for staging certs at the beginning of the HTTPS server block
        sudo sed -i '/server {/a\    # This server uses a Let\'s Encrypt STAGING certificate for testing.\n    # It is NOT secure for production use.' /etc/nginx/sites-available/$DOMAIN.conf
        echo "Added warning to NGINX configuration about staging certificate"
    fi

    sudo nginx -t && sudo systemctl reload nginx

else
    echo "Failed to obtain SSL certificate. DNS propagation may not be complete yet."
    echo "Continuing with deployment, but HTTPS will not be available until certificate is obtained."

    # Set up a basic HTTP configuration without HTTPS
    sudo tee /etc/nginx/sites-available/$DOMAIN.conf > /dev/null << 'EON'
server {
    listen 80;
    server_name DOMAIN_PLACEHOLDER;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:PORT_PLACEHOLDER/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Grafana
    location /grafana/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Admin frontend
    location /admin {
        alias /var/www/html/admin;
        try_files $uri $uri/ /admin/index.html;
        index index.html;
    }

    # User frontend (root path)
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
        index index.html;
    }
}
EON

    # Replace placeholders
    sudo sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" /etc/nginx/sites-available/$DOMAIN.conf
    sudo sed -i "s/PORT_PLACEHOLDER/$SERVER_PORT/g" /etc/nginx/sites-available/$DOMAIN.conf

    sudo nginx -t && sudo systemctl reload nginx
fi

# Setup auto-renewal
echo "Setting up SSL auto-renewal..."
echo "0 3 * * * root certbot renew --quiet --deploy-hook 'systemctl reload nginx'" | sudo tee -a /etc/crontab > /dev/null
EOF

                            # Deploy the application with enhanced Docker cleanup
                            echo "Deploying application..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST bash << 'EOF'
cd ~/app-deployment
echo "Current directory: $(pwd)"
echo "Logging into Docker Hub..."
echo "$DOCKER_PASSWORD" | sudo docker login --username "$DOCKER_USERNAME" --password-stdin

# Enhanced Docker cleanup
echo "Stopping and removing existing containers..."
sudo docker-compose down --remove-orphans || true

echo "Checking for any remaining application containers..."
APP_CONTAINERS=$(sudo docker ps -a --filter "name=backend|mysql|grafana|prometheus" -q)
if [ ! -z "$APP_CONTAINERS" ]; then
    echo "Removing application containers: $APP_CONTAINERS"
    sudo docker rm -f $APP_CONTAINERS || true
fi

echo "Removing existing application images..."
APP_IMAGES=$(sudo docker images "jathurt/myapp-backend" -q)
if [ ! -z "$APP_IMAGES" ]; then
    echo "Removing application images: $APP_IMAGES"
    sudo docker rmi -f $APP_IMAGES || true
fi

echo "Cleaning up dangling images and unused resources..."
sudo docker system prune -af || true

echo "Cleaning up networks..."
sudo docker network prune -f || true

echo "Pulling latest images..."
sudo docker-compose pull

echo "Starting services..."
sudo docker-compose up -d

echo "Checking if services started successfully..."
if ! sudo docker-compose ps | grep -q "Up"; then
    echo "Containers failed to start properly"
    sudo docker-compose logs
    exit 1
fi

echo "Listing running containers:"
sudo docker ps

echo "Deployment completed successfully!"
EOF
                        '''
                    }
                }
            }
        }

        stage('Verify SSL') {
            steps {
                withEnv([
                    "REMOTE_USER=${EC2_USER}",
                    "REMOTE_HOST=${EC2_HOST}",
                    "DOMAIN_NAME=${DOMAIN_NAME}",
                    "LETSENCRYPT_ENV=${LETSENCRYPT_ENV}"
                ]) {
                    sshagent(['ec2-ssh-key']) {
                        sh '''
                            echo "Verifying SSL certificate for ${DOMAIN_NAME}..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "DOMAIN_NAME='${DOMAIN_NAME}' LETSENCRYPT_ENV='${LETSENCRYPT_ENV}' bash -s" << 'EOF'
# Store domain in local variable
DOMAIN="${DOMAIN_NAME}"
LETSENCRYPT_ENV="${LETSENCRYPT_ENV}"

# Check if certificate exists
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "Certificate exists. Checking expiration:"
    sudo certbot certificates --domain $DOMAIN

    # Check certificate using OpenSSL
    echo "Performing SSL connection test:"
    CERT_EXPIRY=$(sudo openssl x509 -in /etc/letsencrypt/live/$DOMAIN/cert.pem -noout -enddate | cut -d= -f2)
    echo "Certificate expires on: $CERT_EXPIRY"

    # Detect if we're using a staging certificate
    ISSUER=$(sudo openssl x509 -in /etc/letsencrypt/live/$DOMAIN/cert.pem -noout -issuer)
    if [[ $ISSUER == *"Fake"* || $ISSUER == *"staging"* || $ISSUER == *"Staging"* ]]; then
        echo "WARNING: This is a Let's Encrypt STAGING certificate."
        echo "It will not be trusted by browsers and will show security warnings."
        echo "This is intentional during testing to avoid hitting rate limits."
    else
        echo "This is a Let's Encrypt PRODUCTION certificate."
    fi

    # Create a test page to verify SSL on frontend
    echo "Creating SSL verification page..."
    sudo mkdir -p /var/www/html
    sudo tee /var/www/html/ssl-verify.html > /dev/null << 'EOH'
<!DOCTYPE html>
<html>
<head>
    <title>SSL Verification</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .warning { background-color: #fff3cd; border-left: 5px solid #ffc107; padding: 10px; margin: 20px 0; }
        .success { background-color: #d4edda; border-left: 5px solid #28a745; padding: 10px; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>SSL Certificate Verification</h1>
    <p>Domain: DOMAIN_PLACEHOLDER</p>
    <p>Timestamp: TIMESTAMP_PLACEHOLDER</p>

    ENVIRONMENT_WARNING

    <div class="success">
        <h2>Connection Information:</h2>
        <p>Your connection to this site is encrypted using SSL/TLS.</p>
    </div>
</body>
</html>
EOH

    # Add environment warning if using staging
    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        WARNING_HTML='<div class="warning">
        <h2>⚠️ STAGING CERTIFICATE WARNING ⚠️</h2>
        <p>This site is using a <strong>Let\'s Encrypt STAGING</strong> certificate for testing purposes.</p>
        <p>Your browser will show security warnings because this certificate is not trusted.</p>
        <p>This is expected behavior during development and testing.</p>
    </div>'
        sudo sed -i "s/ENVIRONMENT_WARNING/$WARNING_HTML/g" /var/www/html/ssl-verify.html
    else
        sudo sed -i "s/ENVIRONMENT_WARNING//g" /var/www/html/ssl-verify.html
    fi

    # Replace placeholders
    sudo sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" /var/www/html/ssl-verify.html
    sudo sed -i "s/TIMESTAMP_PLACEHOLDER/$(date)/g" /var/www/html/ssl-verify.html

    sudo chown -R www-data:www-data /var/www/html
    echo "SSL verification page created at https://$DOMAIN/ssl-verify.html"

    # Provide explicit instructions for manually checking the certificate
    echo ""
    echo "--------------------------------------------------------"
    echo "TO VERIFY THE CERTIFICATE IN YOUR BROWSER:"
    echo "--------------------------------------------------------"
    echo "1. Visit https://$DOMAIN/ssl-verify.html"
    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        echo "2. You WILL see a security warning (this is expected with staging certificates)"
        echo "3. Proceed past the warning to verify the page loads"
        echo "4. The page will show a warning banner indicating it's a staging certificate"
    else
        echo "2. Verify the connection is secure (look for the padlock icon)"
        echo "3. The page should load without any security warnings"
    fi
    echo "--------------------------------------------------------"

else
    echo "Certificate not found for $DOMAIN"
    echo "This is expected if DNS propagation is not complete yet."
    echo "Run a manual certbot certificate acquisition after DNS propagation is complete:"

    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        echo "sudo certbot --nginx -d $DOMAIN --staging"
    else
        echo "sudo certbot --nginx -d $DOMAIN"
    fi

    # Not failing the build, but warning user
    exit 0
fi
EOF
                        '''
                    }
                }
            }
        }

        stage('Rate Limit Information') {
            steps {
                echo '''
----------------------------------------------------------
LET'S ENCRYPT RATE LIMIT INFORMATION
----------------------------------------------------------
When using the PRODUCTION environment, Let's Encrypt enforces the following limits:
- Up to 5 certificates per exact set of hostnames every 7 days
- Up to 50 certificates per registered domain every 7 days

The STAGING environment has much higher limits:
- Up to 30,000 certificates per exact set of hostnames every week
- Up to 30,000 certificates per registered domain every second

IMPORTANT: Staging certificates are NOT trusted by browsers and will show security warnings.
Use staging for testing, and only switch to production for final deployment.
----------------------------------------------------------
'''
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker resources
                sh 'docker logout || true'
                sh 'docker system prune -f || true'

                // Remove sensitive files
                sh '''
                    rm -f .env
                    rm -f get-docker.sh || true
                '''

                cleanWs()
            }
        }
        success {
            echo """
Successfully deployed to ${DEPLOY_ENV} environment at ${EC2_HOST}

SSL CERTIFICATE INFORMATION:
- Using Let's Encrypt ${LETSENCRYPT_ENV} environment
- ${LETSENCRYPT_ENV == 'staging' ? 'WARNING: The staging certificate will not be trusted by browsers. This is expected during testing.' : 'The production certificate should be trusted by all browsers.'}
- If SSL certificate wasn't obtained yet, it will be automatically obtained once DNS propagation completes.
"""
        }
        failure {
            echo "Deployment to ${DEPLOY_ENV} failed"
        }
    }
}
