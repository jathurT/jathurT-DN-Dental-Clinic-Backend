pipeline {
    agent any

    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['staging', 'production'], description: 'Select deployment environment')
        string(name: 'SERVER_PORT', defaultValue: '8081', description: 'Port for the application to run on EC2')
        string(name: 'MYSQL_PORT', defaultValue: '3306', description: 'Port for MySQL to run on EC2')
        choice(name: 'LETSENCRYPT_ENV', choices: ['staging', 'production'],
               description: 'Select Let\'s Encrypt environment (use staging to avoid rate limits during testing)')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
    }

    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        MAIL_CREDENTIALS = credentials('mail-credentials')
        JWT_SECRET = credentials('jwt-secret')
        DB_CREDENTIALS = credentials('db-credentials')
        MYSQL_ROOT_PASSWORD = credentials('mysql-root-password')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = "jathurt/myapp-backend"
        EC2_HOST = credentials('ec2-host')
        EC2_USER = 'ubuntu'
        DEPLOY_ENV = "${params.DEPLOY_ENV ?: 'staging'}"
        SERVER_PORT = "${params.SERVER_PORT}"
        MYSQL_PORT = "${params.MYSQL_PORT}"
        DOMAIN_NAME = "dndentalclinic.com.lk"
        ADMIN_EMAIL = "ktmjathur2001@gmail.com"
        LETSENCRYPT_ENV = "${params.LETSENCRYPT_ENV ?: 'staging'}"
        SONAR_PROJECT_KEY = "com.dndentalclinic:dndentalclinic"
        SONAR_PROJECT_NAME = "dndentalclinic"

        APP_DEFAULT_ADMIN_USERNAME = credentials('admin-username')
        APP_DEFAULT_ADMIN_EMAIL = credentials('admin-email')
        APP_DEFAULT_ADMIN_PASSWORD = credentials('admin-password')

        APP_DEFAULT_DOCTOR_USERNAME = credentials('doctor-username')
        APP_DEFAULT_DOCTOR_EMAIL = credentials('doctor-email')
        APP_DEFAULT_DOCTOR_PASSWORD = credentials('doctor-password')

        APP_DEFAULT_RECEPTIONIST_USERNAME = credentials('receptionist-username')
        APP_DEFAULT_RECEPTIONIST_EMAIL = credentials('receptionist-email')
        APP_DEFAULT_RECEPTIONIST_PASSWORD = credentials('receptionist-password')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x mvnw'
                sh './mvnw clean package -DskipTests --no-transfer-progress'
            }
        }

        stage('Test') {
            when {
                expression { return !params.SKIP_TESTS }
            }
            steps {
                sh './mvnw test --no-transfer-progress'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_CREDENTIALS = credentials('sonar-token')
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        ./mvnw sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=${SONAR_CREDENTIALS} \
                        -Dsonar.java.coveragePlugin=jacoco \
                        -Dsonar.junit.reportsPath=target/surefire-reports \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.sources=src/main/java
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Prepare .env File') {
            steps {
                script {
                    sh '''
                        # Create .env file with secure permissions
                        touch .env && chmod 600 .env

                        cat > .env << EOL
SPRING_APPLICATION_NAME=backend
SERVER_PORT=${SERVER_PORT}
MYSQL_PORT=${MYSQL_PORT}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dental
SPRING_DATASOURCE_USERNAME=${DB_CREDENTIALS_USR}
SPRING_DATASOURCE_PASSWORD=${DB_CREDENTIALS_PSW}
SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
SPRING_JPA_SHOW_SQL=false
APP_CORS_ALLOWED_ORIGINS=https://${DOMAIN_NAME},http://localhost:3000
APP_RESET_PASSWORD_LINK=https://${DOMAIN_NAME}/reset-password
SPRING_APP_JWTSECRET=${JWT_SECRET}
SPRING_APP_JWTEXPIRATIONMS=86400000
SPRING_APP_JWTCOOKIENAME=dn-dental-clinic
SPRING_MAIL_HOST=smtp.gmail.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=${MAIL_CREDENTIALS_USR}
SPRING_MAIL_PASSWORD=${MAIL_CREDENTIALS_PSW}
SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT=5000
AWS_ACCESSKEYID=${AWS_CREDENTIALS_USR}
AWS_SECRETKEY=${AWS_CREDENTIALS_PSW}
AWS_REGION=eu-north-1
AWS_S3_BUCKET=patient-logbook-photos

APP_DEFAULT_ADMIN_USERNAME=${APP_DEFAULT_ADMIN_USERNAME}
APP_DEFAULT_ADMIN_EMAIL=${APP_DEFAULT_ADMIN_EMAIL}
APP_DEFAULT_ADMIN_PASSWORD=${APP_DEFAULT_ADMIN_PASSWORD}
APP_DEFAULT_DOCTOR_USERNAME=${APP_DEFAULT_DOCTOR_USERNAME}
APP_DEFAULT_DOCTOR_EMAIL=${APP_DEFAULT_DOCTOR_EMAIL}
APP_DEFAULT_DOCTOR_PASSWORD=${APP_DEFAULT_DOCTOR_PASSWORD}
APP_DEFAULT_RECEPTIONIST_USERNAME=${APP_DEFAULT_RECEPTIONIST_USERNAME}
APP_DEFAULT_RECEPTIONIST_EMAIL=${APP_DEFAULT_RECEPTIONIST_EMAIL}
APP_DEFAULT_RECEPTIONIST_PASSWORD=${APP_DEFAULT_RECEPTIONIST_PASSWORD}
EOL

                        # Verify file was created successfully
                        if [ ! -f .env ]; then
                            echo "Failed to create .env file"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Check Monitoring Directories') {
            steps {
                script {
                    sh '''
                        # Verify that the required directories exist
                        if [ ! -d "prometheus" ]; then
                            echo "Error: prometheus directory not found in project"
                            exit 1
                        fi

                        if [ ! -d "grafana/provisioning/dashboards" ]; then
                            echo "Error: grafana/provisioning/dashboards directory not found in project"
                            exit 1
                        fi

                        if [ ! -d "grafana/provisioning/datasources" ]; then
                            echo "Error: grafana/provisioning/datasources directory not found in project"
                            exit 1
                        fi

                        # Verify the directories contents
                        ls -la prometheus/
                        ls -la grafana/provisioning/dashboards/
                        ls -la grafana/provisioning/datasources/
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                    sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'
                sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }

        stage('Deploy to EC2') {
            steps {
                withEnv([
                    "REMOTE_USER=${EC2_USER}",
                    "REMOTE_HOST=${EC2_HOST}",
                    "DOCKER_USERNAME=${DOCKER_CREDENTIALS_USR}",
                    "DOCKER_PASSWORD=${DOCKER_CREDENTIALS_PSW}",
                    "DOMAIN_NAME=${DOMAIN_NAME}",
                    "ADMIN_EMAIL=${ADMIN_EMAIL}",
                    "SERVER_PORT=${SERVER_PORT}",
                    "LETSENCRYPT_ENV=${LETSENCRYPT_ENV}"
                ]) {
                    sshagent(['ec2-ssh-key']) {
                        sh '''
                            set -e  # Exit on any error

                            echo "Preparing deployment on ${REMOTE_USER}@${REMOTE_HOST}..."

                            # First check and clean existing deployment directory if needed
                            echo "Checking and cleaning existing directories if needed..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "sudo rm -rf ~/app-deployment || true"

                            # Create remote directory structure with proper permissions
                            echo "Creating remote directories with proper permissions..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/prometheus"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/grafana/provisioning/dashboards"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment/grafana/provisioning/datasources"

                            # Ensure the ubuntu user owns all these directories
                            echo "Setting ownership of remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "sudo chown -R $REMOTE_USER:$REMOTE_USER ~/app-deployment"

                            # Ensure proper permissions on remote directories
                            echo "Setting permissions on remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "chmod -R 755 ~/app-deployment"

                            # List directories to verify
                            echo "Verifying remote directories..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/"

                            # Copy main config files
                            echo "Copying docker-compose.yml and .env..."
                            scp -o StrictHostKeyChecking=no docker-compose.yml .env $REMOTE_USER@$REMOTE_HOST:~/app-deployment/

                            # Copy the existing prometheus and grafana configuration files
                            echo "Copying prometheus configuration..."
                            scp -o StrictHostKeyChecking=no prometheus/prometheus.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/prometheus/

                            echo "Copying grafana dashboard configurations..."
                            scp -o StrictHostKeyChecking=no grafana/provisioning/dashboards/dashboard.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/dashboards/
                            scp -o StrictHostKeyChecking=no grafana/provisioning/dashboards/booking_dashboard.json $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/dashboards/

                            echo "Copying grafana datasource configurations..."
                            scp -o StrictHostKeyChecking=no grafana/provisioning/datasources/datasource.yml $REMOTE_USER@$REMOTE_HOST:~/app-deployment/grafana/provisioning/datasources/

                            # Verify files on remote server
                            echo "Verifying remote files..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/prometheus/"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/grafana/provisioning/dashboards/"
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ls -la ~/app-deployment/grafana/provisioning/datasources/"

                            # Setup SSL Certificate with Let's Encrypt
                            echo "Setting up SSL for domain $DOMAIN_NAME using Let's Encrypt $LETSENCRYPT_ENV environment..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "DOMAIN_NAME='${DOMAIN_NAME}' SERVER_PORT='${SERVER_PORT}' ADMIN_EMAIL='${ADMIN_EMAIL}' LETSENCRYPT_ENV='${LETSENCRYPT_ENV}' bash -s" << 'EOF'
# Store environment variables in local variables
DOMAIN="${DOMAIN_NAME}"
ADMIN_EMAIL="${ADMIN_EMAIL}"
SERVER_PORT="${SERVER_PORT}"
LETSENCRYPT_ENV="${LETSENCRYPT_ENV}"

echo "Using domain: $DOMAIN"
echo "Using admin email: $ADMIN_EMAIL"
echo "Using server port: $SERVER_PORT"
echo "Using Let's Encrypt environment: $LETSENCRYPT_ENV"

# Install required packages
sudo apt-get update
sudo apt-get install -y certbot python3-certbot-nginx nginx

# Check if port 443 is open
echo "Checking if port 443 is accessible..."
sudo netstat -tuln | grep :443 || echo "Port 443 not currently in use"

# Clean up existing configurations
echo "Cleaning up existing configurations..."
sudo rm -f /etc/nginx/sites-enabled/default
sudo rm -f /etc/nginx/sites-enabled/$DOMAIN.conf
sudo rm -f /etc/nginx/sites-available/$DOMAIN.conf

# Create directory for certbot
sudo mkdir -p /var/www/certbot
sudo chown -R www-data:www-data /var/www/certbot

# Create initial HTTP configuration for certificate challenge
echo "Creating initial HTTP configuration..."
sudo tee /etc/nginx/sites-available/$DOMAIN.conf > /dev/null << EON
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://\$host\$request_uri;
    }
}
EON

# Enable the site
sudo ln -sf /etc/nginx/sites-available/$DOMAIN.conf /etc/nginx/sites-enabled/

# Test and reload nginx
echo "Testing Nginx configuration..."
sudo nginx -t && sudo systemctl reload nginx

# Check for existing certificate and its type
CERTIFICATE_EXISTS=false
IS_STAGING_CERT=false

if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    CERTIFICATE_EXISTS=true
    # Check if it's a staging certificate
    ISSUER=$(sudo openssl x509 -in /etc/letsencrypt/live/$DOMAIN/cert.pem -noout -issuer)
    if [[ $ISSUER == *"Fake"* || $ISSUER == *"Staging"* ]]; then
        IS_STAGING_CERT=true
    fi

    # Check certificate expiration
    CERT_EXPIRY=$(sudo openssl x509 -in /etc/letsencrypt/live/$DOMAIN/cert.pem -noout -enddate | cut -d= -f2)
    CERT_EXPIRY_EPOCH=$(date -d "$CERT_EXPIRY" +%s)
    CURRENT_EPOCH=$(date +%s)
    DAYS_UNTIL_EXPIRY=$(( ($CERT_EXPIRY_EPOCH - $CURRENT_EPOCH) / 86400 ))

    echo "Certificate exists. Expires in $DAYS_UNTIL_EXPIRY days"
fi

# Determine if we need to regenerate certificate
NEED_NEW_CERT=false

if [ "$CERTIFICATE_EXISTS" = false ]; then
    echo "No certificate exists. Will obtain new certificate."
    NEED_NEW_CERT=true
elif [ "$IS_STAGING_CERT" = true ] && [ "$LETSENCRYPT_ENV" = "production" ]; then
    echo "Existing certificate is staging but production requested. Will obtain new certificate."
    NEED_NEW_CERT=true
elif [ "$IS_STAGING_CERT" = false ] && [ "$LETSENCRYPT_ENV" = "staging" ]; then
    echo "Existing certificate is production but staging requested. Will obtain new certificate."
    NEED_NEW_CERT=true
elif [ "$DAYS_UNTIL_EXPIRY" -lt 30 ]; then
    echo "Certificate expires in less than 30 days. Will renew."
    NEED_NEW_CERT=true
else
    echo "Valid certificate exists. No need to obtain new certificate."
fi

# Configure certbot command based on the environment
if [ "$NEED_NEW_CERT" = true ]; then
    if [ "$LETSENCRYPT_ENV" = "staging" ]; then
        echo "Using Let's Encrypt STAGING environment to avoid rate limits"
        CERTBOT_CMD="sudo certbot certonly --nginx -d $DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL --staging"
    else
        echo "Using Let's Encrypt PRODUCTION environment"
        CERTBOT_CMD="sudo certbot certonly --nginx -d $DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL"
    fi

    # If switching from staging to production or vice versa, delete existing cert first
    if [ "$CERTIFICATE_EXISTS" = true ] && [ "$IS_STAGING_CERT" = true ] && [ "$LETSENCRYPT_ENV" = "production" ]; then
        echo "Removing existing staging certificate..."
        sudo certbot delete --cert-name "$DOMAIN" --non-interactive
    elif [ "$CERTIFICATE_EXISTS" = true ] && [ "$IS_STAGING_CERT" = false ] && [ "$LETSENCRYPT_ENV" = "staging" ]; then
        echo "Removing existing production certificate..."
        sudo certbot delete --cert-name "$DOMAIN" --non-interactive
    fi

    # Run Certbot to obtain SSL certificate
    echo "Obtaining SSL certificate for $DOMAIN..."
    eval "$CERTBOT_CMD"
else
    echo "Using existing certificate"
fi

# Verify certificate was obtained
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "Certificate successfully obtained/exists!"

    # Create full Nginx configuration with HTTPS
    echo "Creating full Nginx configuration with HTTPS..."
    sudo tee /etc/nginx/sites-available/$DOMAIN.conf > /dev/null << EON
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Backend API
    location /api/ {
        proxy_pass http://localhost:$SERVER_PORT/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Grafana
    location /grafana/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Admin frontend
    location /admin {
        alias /var/www/html/admin;
        try_files \$uri \$uri/ /admin/index.html;
        index index.html;
    }

    # User frontend
    location / {
        root /var/www/html;
        try_files \$uri \$uri/ /index.html;
        index index.html;
    }
}
EON

    # Test configuration
    echo "Testing final Nginx configuration..."
    sudo nginx -t

    if [ $? -eq 0 ]; then
        echo "Configuration test passed, reloading Nginx..."
        sudo systemctl reload nginx

        # Verify HTTPS is working
        echo "Verifying HTTPS setup..."
        sleep 5
        curl -sSI https://$DOMAIN > /dev/null
        if [ $? -eq 0 ]; then
            echo "HTTPS is working!"
            # Show what's listening on port 443
            sudo netstat -tuln | grep :443
        else
            echo "HTTPS test failed. Checking logs..."
            sudo tail -n 50 /var/log/nginx/error.log
        fi
    else
        echo "Nginx configuration test failed. Showing error details:"
        sudo nginx -t
    fi
else
    echo "Failed to obtain certificate. Checking Let's Encrypt logs..."
    sudo tail -n 50 /var/log/letsencrypt/letsencrypt.log
fi

# Final status check
echo "Final status check:"
echo "Nginx status:"
sudo systemctl status nginx | head -n 10
echo "SSL certificates status:"
sudo certbot certificates
echo "Open ports:"
sudo netstat -tuln | grep -E ':80|:443'

# Setup auto-renewal if certificate exists
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "Setting up SSL auto-renewal..."
    (crontab -l 2>/dev/null | grep -v "certbot renew" ; echo "0 3 * * * certbot renew --quiet --deploy-hook 'systemctl reload nginx'") | sudo crontab -
fi
EOF

                            # Deploy the application with enhanced Docker cleanup
                            echo "Deploying application..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST bash << 'EOF'
cd ~/app-deployment
echo "Current directory: $(pwd)"
echo "Logging into Docker Hub..."
echo "$DOCKER_PASSWORD" | sudo docker login --username "$DOCKER_USERNAME" --password-stdin

# Enhanced Docker cleanup
echo "Stopping and removing existing containers..."
sudo docker-compose down --remove-orphans || true

echo "Checking for any remaining application containers..."
APP_CONTAINERS=$(sudo docker ps -a --filter "name=backend|mysql|grafana|prometheus" -q)
if [ ! -z "$APP_CONTAINERS" ]; then
    echo "Removing application containers: $APP_CONTAINERS"
    sudo docker rm -f $APP_CONTAINERS || true
fi

echo "Removing existing application images..."
APP_IMAGES=$(sudo docker images "jathurt/myapp-backend" -q)
if [ ! -z "$APP_IMAGES" ]; then
    echo "Removing application images: $APP_IMAGES"
    sudo docker rmi -f $APP_IMAGES || true
fi

echo "Cleaning up dangling images and unused resources..."
sudo docker system prune -af || true

echo "Cleaning up networks..."
sudo docker network prune -f || true

echo "Pulling latest images..."
sudo docker-compose pull

echo "Starting services..."
sudo docker-compose up -d

echo "Checking if services started successfully..."
if ! sudo docker-compose ps | grep -q "Up"; then
    echo "Containers failed to start properly"
    sudo docker-compose logs
    exit 1
fi

echo "Listing running containers:"
sudo docker ps

echo "Deployment completed successfully!"
EOF
                        '''
                    }
                }
            }
        }

        stage('Verify SSL') {
            steps {
                withEnv([
                    "REMOTE_USER=${EC2_USER}",
                    "REMOTE_HOST=${EC2_HOST}",
                    "DOMAIN_NAME=${DOMAIN_NAME}",
                    "LETSENCRYPT_ENV=${LETSENCRYPT_ENV}"
                ]) {
                    sshagent(['ec2-ssh-key']) {
                        sh '''
                            echo "Verifying SSL certificate for ${DOMAIN_NAME}..."
                            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "DOMAIN_NAME='${DOMAIN_NAME}' LETSENCRYPT_ENV='${LETSENCRYPT_ENV}' bash -s" << 'EOF'
# Store domain in local variable
DOMAIN="${DOMAIN_NAME}"
LETSENCRYPT_ENV="${LETSENCRYPT_ENV}"

# Check if certificate exists
if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "Certificate exists. Checking details:"
    sudo certbot certificates --domain $DOMAIN

    # Check certificate using OpenSSL
    echo "Performing SSL connection test:"
    echo "Testing SSL connection..."
    openssl s_client -connect $DOMAIN:443 -servername $DOMAIN < /dev/null 2>/dev/null | openssl x509 -noout -text | grep -A 2 "Validity"

    # Check if HTTPS is working
    echo "Testing HTTPS accessibility..."
    curl_output=$(curl -sSI https://$DOMAIN)
    if [ $? -eq 0 ]; then
        echo "HTTPS is accessible"
        echo "$curl_output" | head -n 1
    else
        echo "HTTPS is not accessible"
        echo "Trying with verbose output:"
        curl -v https://$DOMAIN
    fi

    # Check if Nginx is listening on port 443
    echo "Checking if Nginx is listening on port 443..."
    sudo netstat -tlnp | grep :443

    # Create a test page to verify SSL on frontend
    echo "Creating SSL verification page..."
    sudo mkdir -p /var/www/html
    sudo tee /var/www/html/ssl-verify.html > /dev/null << 'EOH'
<!DOCTYPE html>
<html>
<head>
    <title>SSL Verification</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .warning { background-color: #fff3cd; border-left: 5px solid #ffc107; padding: 10px; margin: 20px 0; }
        .success { background-color: #d4edda; border-left: 5px solid #28a745; padding: 10px; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>SSL Certificate Verification</h1>
    <p>Domain: $DOMAIN</p>
    <p>Timestamp: $(date)</p>

    <div class="success">
        <h2>Connection Information:</h2>
        <p>Your connection to this site is encrypted using SSL/TLS.</p>
    </div>
</body>
</html>
EOH

    sudo chown -R www-data:www-data /var/www/html
    echo "SSL verification page created at https://$DOMAIN/ssl-verify.html"

    # Show Nginx status
    echo "Nginx status:"
    sudo systemctl status nginx | grep Active

    # Additional debugging
    echo "Nginx configuration:"
    sudo cat /etc/nginx/sites-enabled/$DOMAIN.conf | grep -E 'listen|ssl_certificate|server_name'

else
    echo "Certificate not found for $DOMAIN"
    exit 1
fi
EOF
                        '''
                    }
                }
            }
        }

        stage('Rate Limit Information') {
            steps {
                echo '''
----------------------------------------------------------
LET'S ENCRYPT RATE LIMIT INFORMATION
----------------------------------------------------------
When using the PRODUCTION environment, Let's Encrypt enforces the following limits:
- Up to 5 certificates per exact set of hostnames every 7 days
- Up to 50 certificates per registered domain every 7 days

The STAGING environment has much higher limits:
- Up to 30,000 certificates per exact set of hostnames every week
- Up to 30,000 certificates per registered domain every second

IMPORTANT: Staging certificates are NOT trusted by browsers and will show security warnings.
Use staging for testing, and only switch to production for final deployment.
----------------------------------------------------------
'''
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker resources
                sh 'docker logout || true'
                sh 'docker system prune -f || true'

                // Remove sensitive files
                sh '''
                    rm -f .env
                    rm -f get-docker.sh || true
                '''

                cleanWs()
            }
        }
        success {
            echo """
Successfully deployed to ${DEPLOY_ENV} environment at ${EC2_HOST}

SSL CERTIFICATE INFORMATION:
- Using Let's Encrypt ${LETSENCRYPT_ENV} environment
- ${LETSENCRYPT_ENV == 'staging' ? 'WARNING: The staging certificate will not be trusted by browsers. This is expected during testing.' : 'The production certificate should be trusted by all browsers.'}
- HTTPS should now be working at https://${DOMAIN_NAME}
"""
        }
        failure {
            echo "Deployment to ${DEPLOY_ENV} failed"
        }
    }
}