pipeline {
    agent any

    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['staging', 'production'], description: 'Select deployment environment')
        string(name: 'SERVER_PORT', defaultValue: '8081', description: 'Port for the application to run on EC2')
        string(name: 'MYSQL_PORT', defaultValue: '3306', description: 'Port for MySQL to run on EC2')
    }

    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        MAIL_CREDENTIALS = credentials('mail-credentials')
        JWT_SECRET = credentials('jwt-secret')
        DB_CREDENTIALS = credentials('db-credentials')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = "jathurt/myapp-backend"
        EC2_HOST = credentials('ec2-host')
        EC2_USER = 'ubuntu'
        DEPLOY_ENV = "${params.DEPLOY_ENV ?: 'staging'}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x mvnw'
                sh './mvnw clean package -DskipTests --no-transfer-progress'
            }
        }

        stage('Test') {
            steps {
                withEnv([
                    'SPRING_PROFILES_ACTIVE=test',
                    'SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb',
                    'SPRING_DATASOURCE_USERNAME=sa',
                    'SPRING_DATASOURCE_PASSWORD=',
                    'SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop'
                ]) {
                    sh './mvnw test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Prepare .env File') {
            steps {
                script {
                    sh '''
                    cat > .env << EOL
SPRING_APPLICATION_NAME=backend
SERVER_PORT=${params.SERVER_PORT}
MYSQL_PORT=${params.MYSQL_PORT}
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dental
SPRING_DATASOURCE_USERNAME=${DB_CREDENTIALS_USR}
SPRING_DATASOURCE_PASSWORD=${DB_CREDENTIALS_PSW}
SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
SPRING_JPA_SHOW_SQL=false
APP_CORS_ALLOWED_ORIGINS=*
APP_RESET_PASSWORD_LINK=http://myapp.com/reset-password
SPRING_APP_JWTSECRET=${JWT_SECRET}
SPRING_APP_JWTEXPIRATIONMS=86400000
SPRING_APP_JWTCOOKIENAME=dn-dental-clinic
SPRING_MAIL_HOST=smtp.gmail.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=${MAIL_CREDENTIALS_USR}
SPRING_MAIL_PASSWORD=${MAIL_CREDENTIALS_PSW}
SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT=5000
AWS_ACCESSKEYID=${AWS_CREDENTIALS_USR}
AWS_SECRETKEY=${AWS_CREDENTIALS_PSW}
AWS_REGION=eu-north-1
AWS_S3_BUCKET=patient-logbook-photos
EOL
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                    sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'
                sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    sshagent(['ec2-ssh-key']) {
                        sh """
                            # Ensure docker and docker-compose are installed
                            ssh -o StrictHostKeyChecking=no \$EC2_USER@\$EC2_HOST '
                                if ! command -v docker-compose &> /dev/null; then
                                    sudo apt-get update
                                    sudo apt-get install -y docker-compose
                                fi

                                if ! groups \$USER | grep -q docker; then
                                    sudo usermod -aG docker \$USER
                                    exec sg docker -c "echo Docker group applied"
                                fi
                            '

                            # Copy deployment files
                            scp -o StrictHostKeyChecking=no docker-compose.yml \$EC2_USER@\$EC2_HOST:/home/\$EC2_USER/
                            scp -o StrictHostKeyChecking=no .env \$EC2_USER@\$EC2_USER:/home/\$EC2_USER/

                            # Deploy using docker-compose
                            ssh -o StrictHostKeyChecking=no \$EC2_USER@\$EC2_HOST '
                                cd /home/\$EC2_USER
                                docker-compose pull
                                docker-compose up -d

                                # Wait for services to be healthy
                                echo "Waiting for services to be healthy..."
                                sleep 30

                                # Check service status
                                if docker-compose ps | grep -q "Up"; then
                                    echo "Services are running successfully"
                                else
                                    echo "Services failed to start properly"
                                    docker-compose logs
                                    exit 1
                                fi
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            sh 'rm -f .env'
            cleanWs()
        }
        success {
            echo "Successfully deployed to ${DEPLOY_ENV} environment at ${EC2_HOST}"
        }
        failure {
            echo "Deployment to ${DEPLOY_ENV} failed"
        }
    }
}